    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>

        <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
        <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            text-align: center;
        }
        .oval {
            height: 70vh;
            width: 60vw;
            border-radius: 80%;
            border: 5px solid #ffffff3b;
            position:absolute;
            left:50%;
            top:50%;
            transform:translate(-50%,-50%);
        }
        #b0{
            position: relative;
            top: 92%;
            left: 0%;
        }
        #b1{
            position: relative;
            top: 75%;
            left: -35%;
        }
        #b2{
            position: relative;
            top: 45%;
            left: -45%;
        }
        #b3{
            position: relative;
            top: 18%;
            left: -40%;
        }
        #b4{
            position: relative;
            top: -5%;
            left: -20%;
        }
        #b5{
            position: relative;
            top: -10%;
            left: 15%;
        }
        #b6{
            position: relative;
            top: 5%;
            left: 40%;
        }
        #b7{
            position: relative;
            top: 30%;
            left: 42%;
        }
        #b8{
            position: relative;
            top: 50%;
            left: 33%;
        }
        #s0{
            top: 92vh;
            left: 50vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s1{
            top: 80vh;
            left: 23vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s2{
            top: 58vh;
            left: 16vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s3{
            top: 24vh;
            left: 17vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s4{
            top: 8vh;
            left: 37vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s5{
            top: 8vh;
            left: 59vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s6{
            top: 24vh;
            left: 83vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s7{
            top: 58vh;
            left: 84vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #s8{
            top: 80vh;
            left: 73vw;
            position:absolute;
            transform:translate(-50%,-50%);
        }
        #overlay {
        position: fixed;
        display: none;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        z-index: 2;
        cursor: pointer;
        overflow-y: scroll;
        overflow-x: scroll;
        }
        * {
         box-sizing: border-box;
        }
        .handview {
            float: left;
            width: 100%;
            padding: 10px;
        }
        .clearfix::after {
        content: "";
        clear: both;
        display: table;
        }
        </style>
    </head>
    <body>
        <div class="oval">
            <div id="b0"><button onclick=getHands(0)>0 notable hands</button></div>
            <div id="b1"><button onclick=getHands(1)>0 notable hands</button></div>
            <div id="b2"><button onclick=getHands(2)>0 notable hands</button></div>
            <div id="b3"><button onclick=getHands(3)>0 notable hands</button></div>
            <div id="b4"><button onclick=getHands(4)>0 notable hands</button></div>
            <div id="b5"><button onclick=getHands(5)>0 notable hands</button></div>
            <div id="b6"><button onclick=getHands(6)>0 notable hands</button></div>
            <div id="b7"><button onclick=getHands(7)>0 notable hands</button></div>
            <div id="b8"><button onclick=getHands(8)>0 notable hands</button></div>
        </div>
        <div id="overlay" onclick="overlayoff()">
            <!-- <div class="clearfix" id="turn{handidx}" >
                <div class="handview" style="background-color:rgb(255, 109, 109)">
                    <div class="handcards" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">HAND</h3>
                        <h4 class="actualhand"></h4>
                        <h3 style="top: 0%;">POS</h3>
                        <h4 class="actualpos"></h4>
                    </div>
                    <div class="pf" style="float: left; padding: 20px;">
                    </div>
                    <div class="flopcards" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">FLOP</h3>
                        <h4 class="actualflop"></h4>
                    </div>
                    <div class="flop" style="float: left; padding: 20px;">
                    </div>
                    <div class="turncard" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">TURN</h3>
                        <h4 class="actualturn"></h4>
                    </div>
                    <div class="turn" style="float: left; padding: 20px;">
                    </div>
                    <div class="rivercard" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">RIVER</h3>
                        <h4 class="actualriver"></h4>
                    </div>
                    <div class="river" style="float: left; padding: 20px;">
                    </div>
                </div> -->
        </div>
        
        <button id='enterbutton' onclick=enterGame() style="top: 2%; left: 2%; position: absolute;">click me!</button>
        
        <div id="s0"></div>
        <div id="s1"></div>
        <div id="s2"></div>
        <div id="s3"></div>
        <div id="s4"></div>
        <div id="s5"></div>
        <div id="s6"></div>
        <div id="s7"></div>
        <div id="s8"></div>
        
        <script>

            const playerhtml = `<h3 class = no></h3>
                                <h4 class = vpip></h4>
                                <h4 class = pfr></h4>
                                <h4 class = agg></h4>
                                <h4 class = bbwpohh></h4>
                                <h4 class = hands></h4>
                                <div style="clear: both">
                                    <h4 style="float: left" class="preflop" ></h4>
                                    <h4 style="float: left" class="flop"></h4>
                                    <h4 style="float: right" class="turn"></h4>
                                </div>
                                <hr />`


            const handhtml = `<div class="clearfix" id="turn{handidx}" >
                <div class="handview" style="background-color:rgb(255, 109, 109)">
                    <div class="handcards" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">HAND</h3>
                        <h4 class="actualhand"></h4>
                        <h3 style="top: 0%;">POS</h3>
                        <h4 class="actualpos"></h4>
                    </div>
                    <div class="pf" style="float: left; padding: 20px;">
                    </div>
                    <div class="flopcards" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">FLOP</h3>
                        <h4 class="actualflop"></h4>
                    </div>
                    <div class="flop" style="float: left; padding: 20px;">
                    </div>
                    <div class="turncard" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">TURN</h3>
                        <h4 class="actualturn"></h4>
                    </div>
                    <div class="turn" style="float: left; padding: 20px;">
                    </div>
                    <div class="rivercard" style="float: left; padding: 20px;">
                        <h3 style="top: 0%;">RIVER</h3>
                        <h4 class="actualriver"></h4>
                    </div>
                    <div class="river" style="float: left; padding: 20px;">
                    </div>
                </div>`

            for ( let i = 0; i < 9; i++ ){
                document.querySelector( '#s' + i ).innerHTML = playerhtml;
            }

            const socket = io('http://localhost:3000');

            socket.on( 'TABLE_UPDATE', ( msg ) => {

                console.log(msg);
                let data = JSON.parse( msg );

                data.forEach( (stats, player) => {
                    if ( stats == null ) {
                        document.querySelector( `#s${player}` ).innerHTML = playerhtml;
                        return;    
                    };

                    document.querySelector( `#s${player} .no` ).textContent = 'Player ' + ( stats.seat + 1 );
                    document.querySelector( `#s${player} .vpip` ).textContent = 'VPIP: ' + ( stats.vpip != null ? stats.vpip : '' );
                    document.querySelector( `#s${player} .pfr` ).textContent = 'PFR: ' + ( stats.pfr != null ? stats.pfr : '' );
                    document.querySelector( `#s${player} .agg` ).textContent = 'AF: ' + ( stats.agg != null ? stats.agg : '' );
                    document.querySelector( `#s${player} .bbwpohh` ).textContent = 'bbwpohh: ' + ( stats.bbwpohh != null ? stats.bbwpohh : '' );
                    document.querySelector( `#s${player} .hands` ).textContent = 'hands: ' + ( stats.hands != null ? stats.hands : '' );
                })
            });

            socket.on( 'ACTION_UPDATE', ( msg ) => {
                console.log(msg);
                let parsedmsg = JSON.parse( msg );
                let street = parsedmsg.street;
                let data = parsedmsg.data;

                for ( const [ seat, turns ] of Object.entries( data ) ){
                    let str = '';

                    turns.forEach( (turn) => {
                        str += turn.act + (turn.amt > 0 ? String( turn.amt ) : '') + ' ';
                    })
                    console.log(`seat: ${seat}, street: ${street}`)
                    console.log(str)
                    document.querySelector( `#s${seat} .${street}` ).textContent = `${street}: ${str}`;
                }
                
            });

            const testfn = () => {
                let playerno = 0
                hands = [[{'player':'board', 'action':'cards!!!!! BITHC'}],[{'player':'board', 'action':'cards!!!!! BITHC'}]]
                let playerhand = 'askljdhfasdjklahjsdf'
                hands.forEach( (hand, idx) => {
                    let newhtml = handhtml.replace('{handidx}', idx)
                    document.getElementById("overlay").innerHTML += newhtml;
                    parsehand( playerno, playerhand, hand, idx);
                })
            }

            function parsehand( playerno, pcards, hand, idx ){
                let flopbc = null;
                let turnbc = null;
                let riverbc = null;


                let handcards = document.querySelector(`#turn${idx} .actualhand`)
                let pos = document.querySelector(`#turn${idx} .actualpos`)
                let pf = document.querySelector(`#turn${idx} .pf`)
                let flopcards = document.querySelector(`#turn${idx} .actualflop`)
                let flop = document.querySelector(`#turn${idx} .flop`)
                let turncard = document.querySelector(`#turn${idx} .actualturn`)
                let turn = document.querySelector(`#turn${idx} .turn`)
                let rivercard = document.querySelector(`#turn${idx} .actualriver`)
                let river = document.querySelector(`#turn${idx} .river`)

                handcards.appendChild(document.createTextNode(pcards))

                for (const turn of hand){
                    if ( flopbc === null && turn.player === 'board' ){
                        flopbc = turn.action;                    // make this compatable
                        flopcards.appendChild(document.createTextNode(flopbc))            // make this real cards
                        continue;
                    }
                    else if ( turnbc === null && turn.player === 'board' ){
                        turnbc = turn.action;
                        turncard.appendChild(document.createTextNode(turnbc))
                        continue;
                    }
                    else if ( riverbc  === null && turn.player === 'board' ){
                        riverbc = turn.action;
                        rivercard.appendChild(document.createTextNode(riverbc))
                        continue;
                    }
                    
                    newturn = `${ playerno = turn.player ? ('player ' + playerno + ' '): ''}${turn.action} ${turn.amt > 0 ? turn.amt : ''}`

                    if (flopbc === null){
                        pf.appendChild(document.createTextNode(newturn))  
                    }
                    else if (turnbc === null){
                        flop.appendChild(document.createTextNode(newturn))
                    }
                    else if (riverbc === null){
                        turn.appendChild(document.createTextNode(newturn))
                    }
                    else{
                        river.appendChild(document.createTextNode(newturn))
                    }
                }
            }

            socket.on( 'RETURN_HANDS', ( msg ) => {
                overlayon();
                console.log(msg);
                let data = JSON.parse( msg );
                let hands = data.hands

                hands.forEach( (hand, idx) => {
                    let newhtml = handhtml.replace('{handidx}', idx)
                    document.getElementById("overlay").innerHTML += newhtml;
                    parsehand( hand.pno, hand.pcards, hand.timeline, idx);
                })
            });

            function overlayon(){
                document.getElementById("overlay").style.display = "block"
            }

            function overlayoff(){
                document.getElementById("overlay").style.display = "none"
            }

            const enterGame = ( ) => {
                document.getElementById('enterbutton').remove()
                socket.emit( 'initialize' );
            }

            const getHands = ( seat ) => {
                socket.emit( 'GET_HANDS', String( seat ) )
            }
        </script>
    </body>
    </html>